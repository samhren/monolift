// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  passwordHash       String   @map("password_hash")
  pkceRefreshToken   String?  @map("pkce_refresh_token")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")
  
  // Relations
  devices            Device[]
  workoutTemplates   WorkoutTemplate[]
  sessions           Session[]
  syncQueue          SyncQueue[]
  changeLog          ChangeLog[]
  
  @@map("users")
}

model Device {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  platform     String
  apiKeyHash   String   @map("api_key_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
  
  @@map("devices")
}

// Exercise management
model Exercise {
  id             Int      @id @default(autoincrement())
  name           String
  category       String
  variantOf      Int?     @map("variant_of")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  
  // Relations
  variantOfExercise Exercise? @relation("ExerciseVariant", fields: [variantOf], references: [id])
  variants          Exercise[] @relation("ExerciseVariant")
  templateExercises TemplateExercise[]
  sets              Set[]
  
  @@map("exercises")
}

// Workout templates
model WorkoutTemplate {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  name         String
  daysPerWeek  Int      @map("days_per_week")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
  exercises    TemplateExercise[]
  sessions     Session[]
  
  @@map("workout_templates")
}

model TemplateExercise {
  templateId    String @map("template_id")
  exerciseId    Int    @map("exercise_id")
  displayOrder  Int    @map("display_order")
  targetSets    Int    @map("target_sets")
  targetReps    String @map("target_reps") // String to allow ranges like "8-10"
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  
  // Relations
  template      WorkoutTemplate @relation(fields: [templateId], references: [id])
  exercise      Exercise        @relation(fields: [exerciseId], references: [id])
  
  @@id([templateId, exerciseId])
  @@map("template_exercises")
}

// Workout sessions
model Session {
  id         String    @id @default(uuid())
  templateId String?   @map("template_id")
  startTs    DateTime  @map("start_ts")
  endTs      DateTime? @map("end_ts")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  
  // Relations
  template   WorkoutTemplate? @relation(fields: [templateId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @map("user_id")
  sets       Set[]
  restLogs   RestLog[]
  
  @@map("sessions")
}

model Set {
  sessionId  String   @map("session_id")
  exerciseId Int      @map("exercise_id")
  setIdx     Int      @map("set_idx")
  reps       Int
  load       Float    // Weight in kg or lbs
  isPartial  Boolean  @default(false) @map("is_partial")
  dropsetOf  Int?     @map("dropset_of") // References set_idx
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  
  // Relations
  session    Session  @relation(fields: [sessionId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  
  @@id([sessionId, exerciseId, setIdx])
  @@map("sets")
}

model RestLog {
  sessionId String   @map("session_id")
  setIdx    Int      @map("set_idx")
  seconds   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  // Relations
  session   Session  @relation(fields: [sessionId], references: [id])
  
  @@id([sessionId, setIdx])
  @@map("rest_logs")
}

// Sync and audit tables
model SyncQueue {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  tableName String    @map("table_name")
  rowId     String    @map("row_id")
  op        SyncOperation
  payload   Json
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  
  @@map("sync_queue")
}

model ChangeLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tableName String   @map("table_name")
  rowId     String   @map("row_id")
  change    Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("change_log")
}

enum SyncOperation {
  INSERT
  UPDATE
  DELETE
}